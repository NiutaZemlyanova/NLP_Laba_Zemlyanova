# -*- coding: utf-8 -*-
"""NLP_Laba_1_Zemlyanova.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o25pCnkq4dCcN2A7Z_wUsqiH07aaZE9x

#**Практическая работа «Предобработка текста »**

***Землянова Анна Группа 932001***

*Задание:*

Требуется прочитать текст на русском языке из файла и вывести все пары соседних слов, которые:
имеют имена существительные или имена прилагательные на первом или втором месте;совпадают по роду, числу и падежу.

Все пары следует выводить в виде лемм. Например, если исходная пара имела вид «необычайных университетов», то должна быть выведена пара «необычайный университет».
"""

pip install pymorphy2

# Токенизация
import nltk
from nltk.tokenize import word_tokenize
nltk.download('punkt') # Загружаем необходимые ресурсы для NLTK

# Сегментация
import nltk
from nltk import sent_tokenize

# Лемматизация
# И получение грамматических атрибутов
import pymorphy2
m = pymorphy2.MorphAnalyzer() # Создаем экземпляр анализатора pymorphy2

# Проверка на то, является ли слово сущ или прил
def is_noun_or_adj(word):
    parsed_word = m.parse(word)[0]
    return 'NOUN' in parsed_word.tag or 'ADJF' in parsed_word.tag

# Совпадают ли слова по роду, числу и падежу
def match_pairs(word1, word2):
# Лемматизируем слова
    parsed_word1 = m.parse(word1)[0]
    parsed_word2 = m.parse(word2)[0]

# Проверяем, совпадают ли слова по роду, числу и падежу
    if 'NOUN' in parsed_word1.tag or 'NOUN' in parsed_word2.tag:
        if parsed_word1.tag.gender == parsed_word2.tag.gender and parsed_word1.tag.number == parsed_word2.tag.number and parsed_word1.tag.case == parsed_word2.tag.case:
            return True
    elif 'ADJF' in parsed_word1.tag or 'ADJF' in parsed_word2.tag:
        if parsed_word1.tag.gender == parsed_word2.tag.gender and parsed_word1.tag.number == parsed_word2.tag.number and parsed_word1.tag.case == parsed_word2.tag.case:
            return True
    else:
        return False

# Прочитаем текст из файла (замените 'input.txt' на путь к вашему файлу)
with open('Text.txt', 'r', encoding='utf-8') as file:
    text = file.read()

    print("Текст до:")
    print(text)

# Найдем и выведем пары
    ### print("Разбиваем текст на предложения:")
    sentences = sent_tokenize(text) # Разбиваем текст на предложения
    ### print(sentences)

    print("\nПары слов, удовлетворяющие условиям:")

    for sentence in sentences:
# Токенизируем предложение на слова

        ### print("\nТокенизируем предложение на слова:")
        words = word_tokenize(sentence)
        ### print(words, "\n")

        # Проходим по словам и ищем пары, удовлетворяюще условиям
        for i in range(len(words) - 1):
            word1 = words[i]
            word2 = words[i + 1]

            if is_noun_or_adj(word1) and is_noun_or_adj(word2) and match_pairs(word1, word2):
              W1 = m.parse(word1)[0].normal_form
              W2 = m.parse(word2)[0].normal_form
              print(" ",W1, W2)